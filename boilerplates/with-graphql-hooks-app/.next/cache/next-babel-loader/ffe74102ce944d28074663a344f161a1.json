{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/ilancaster/Desktop/next-js-learning/boilerplates/with-graphql-hooks-app/lib/with-graphql-client.js\";\nimport React from 'react';\nimport initGraphQL from './init-graphql';\nimport Head from 'next/head';\nimport { getInitialState } from 'graphql-hooks-ssr';\nexport default (App => {\n  var _class, _temp;\n\n  return _temp = _class = class GraphQLHooks extends React.Component {\n    static async getInitialProps(ctx) {\n      const {\n        Component,\n        router\n      } = ctx;\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      } // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n\n      const graphQLClient = initGraphQL();\n      let graphQLState = {};\n\n      if (typeof window === 'undefined') {\n        try {\n          // Run all GraphQL queries\n          graphQLState = await getInitialState({\n            App: React.createElement(App, _extends({}, appProps, {\n              Component: Component,\n              router: router,\n              graphQLClient: graphQLClient,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 26\n              },\n              __self: this\n            })),\n            client: graphQLClient\n          });\n        } catch (error) {\n          // Prevent GraphQL hooks client errors from crashing SSR.\n          // Handle them in components via the state.error prop:\n          // https://github.com/nearform/graphql-hooks#usequery\n          console.error('Error while running `getInitialState`', error);\n        } // getInitialState does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      }\n\n      return _objectSpread({}, appProps, {\n        graphQLState\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.graphQLClient = initGraphQL(props.graphQLState);\n    }\n\n    render() {\n      return React.createElement(App, _extends({}, this.props, {\n        graphQLClient: this.graphQLClient,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }));\n    }\n\n  }, _defineProperty(_class, \"displayName\", 'GraphQLHooks(App)'), _temp;\n});","map":{"version":3,"sources":["/Users/ilancaster/Desktop/next-js-learning/boilerplates/with-graphql-hooks-app/lib/with-graphql-client.js"],"names":["React","initGraphQL","Head","getInitialState","App","GraphQLHooks","Component","getInitialProps","ctx","router","appProps","graphQLClient","graphQLState","window","client","error","console","rewind","constructor","props","render"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,gBAAeC,GAAG,IAAI;AAAA;;AACpB,0BAAO,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AAEhD,iBAAaC,eAAb,CAA8BC,GAA9B,EAAmC;AACjC,YAAM;AAAEF,QAAAA,SAAF;AAAaG,QAAAA;AAAb,UAAwBD,GAA9B;AAEA,UAAIE,QAAQ,GAAG,EAAf;;AACA,UAAIN,GAAG,CAACG,eAAR,EAAyB;AACvBG,QAAAA,QAAQ,GAAG,MAAMN,GAAG,CAACG,eAAJ,CAAoBC,GAApB,CAAjB;AACD,OANgC,CAQjC;AACA;;;AACA,YAAMG,aAAa,GAAGV,WAAW,EAAjC;AACA,UAAIW,YAAY,GAAG,EAAnB;;AACA,UAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,YAAI;AACF;AACAD,UAAAA,YAAY,GAAG,MAAMT,eAAe,CAAC;AACnCC,YAAAA,GAAG,EACD,oBAAC,GAAD,eACMM,QADN;AAEE,cAAA,SAAS,EAAEJ,SAFb;AAGE,cAAA,MAAM,EAAEG,MAHV;AAIE,cAAA,aAAa,EAAEE,aAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFiC;AASnCG,YAAAA,MAAM,EAAEH;AAT2B,WAAD,CAApC;AAWD,SAbD,CAaE,OAAOI,KAAP,EAAc;AACd;AACA;AACA;AACAC,UAAAA,OAAO,CAACD,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACD,SAnBgC,CAqBjC;AACA;;;AACAb,QAAAA,IAAI,CAACe,MAAL;AACD;;AAED,+BACKP,QADL;AAEEE,QAAAA;AAFF;AAID;;AAEDM,IAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,YAAMA,KAAN;AACA,WAAKR,aAAL,GAAqBV,WAAW,CAACkB,KAAK,CAACP,YAAP,CAAhC;AACD;;AAEDQ,IAAAA,MAAM,GAAI;AACR,aAAO,oBAAC,GAAD,eAAS,KAAKD,KAAd;AAAqB,QAAA,aAAa,EAAE,KAAKR,aAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AArD+C,GAAlD,yCACuB,mBADvB;AAuDD,CAxDD","sourcesContent":["import React from 'react'\nimport initGraphQL from './init-graphql'\nimport Head from 'next/head'\nimport { getInitialState } from 'graphql-hooks-ssr'\n\nexport default App => {\n  return class GraphQLHooks extends React.Component {\n    static displayName = 'GraphQLHooks(App)'\n    static async getInitialProps (ctx) {\n      const { Component, router } = ctx\n\n      let appProps = {}\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx)\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const graphQLClient = initGraphQL()\n      let graphQLState = {}\n      if (typeof window === 'undefined') {\n        try {\n          // Run all GraphQL queries\n          graphQLState = await getInitialState({\n            App: (\n              <App\n                {...appProps}\n                Component={Component}\n                router={router}\n                graphQLClient={graphQLClient}\n              />\n            ),\n            client: graphQLClient\n          })\n        } catch (error) {\n          // Prevent GraphQL hooks client errors from crashing SSR.\n          // Handle them in components via the state.error prop:\n          // https://github.com/nearform/graphql-hooks#usequery\n          console.error('Error while running `getInitialState`', error)\n        }\n\n        // getInitialState does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind()\n      }\n\n      return {\n        ...appProps,\n        graphQLState\n      }\n    }\n\n    constructor (props) {\n      super(props)\n      this.graphQLClient = initGraphQL(props.graphQLState)\n    }\n\n    render () {\n      return <App {...this.props} graphQLClient={this.graphQLClient} />\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}