{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport { Component } from 'react';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\n\nclass ChatTwo extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      field: '',\n      newMessage: 0,\n      messages: this.props.messages,\n      subscribe: false,\n      subscribed: false\n    });\n\n    _defineProperty(this, \"subscribe\", () => {\n      if (this.state.subscribe && !this.state.subscribed) {\n        // connect to WS server and listen event\n        this.props.socket.on('message.chat2', this.handleMessage);\n        this.props.socket.on('message.chat1', this.handleOtherMessage);\n        this.setState({\n          subscribed: true\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleMessage\", message => {\n      this.setState(state => ({\n        messages: state.messages.concat(message)\n      }));\n    });\n\n    _defineProperty(this, \"handleOtherMessage\", () => {\n      this.setState(prevState => ({\n        newMessage: prevState.newMessage + 1\n      }));\n    });\n\n    _defineProperty(this, \"handleChange\", event => {\n      this.setState({\n        field: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleSubmit\", event => {\n      event.preventDefault(); // create message object\n\n      const message = {\n        id: new Date().getTime(),\n        value: this.state.field // send object to WS server\n\n      };\n      this.props.socket.emit('message.chat2', message); // add it to state and clean current input value\n\n      this.setState(state => ({\n        field: '',\n        messages: state.messages.concat(message)\n      }));\n    });\n  }\n\n  // fetch old messages data from the server\n  static async getInitialProps({\n    req\n  }) {\n    const response = await fetch('http://localhost:3000/messages/chat2');\n    const messages = await response.json();\n    return {\n      messages\n    };\n  }\n\n  componentDidMount() {\n    this.subscribe();\n  }\n\n  componentDidUpdate() {\n    this.subscribe();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.socket && !state.subscribe) return {\n      subscribe: true\n    };\n    return null;\n  } // close socket connection\n\n\n  componentWillUnmount() {\n    this.props.socket.off('message.chat1', this.handleOtherMessage);\n    this.props.socket.off('message.chat2', this.handleMessage);\n  } // add messages from server to the state\n\n\n  render() {\n    return React.createElement(\"main\", null, React.createElement(\"div\", null, React.createElement(Link, {\n      href: '/'\n    }, React.createElement(\"a\", null, `Chat One ${this.state.newMessage > 0 ? `( ${this.state.newMessage} new message )` : ''}`)), React.createElement(\"br\", null), React.createElement(Link, {\n      href: '/clone'\n    }, React.createElement(\"a\", null, 'Chat Two')), React.createElement(\"ul\", null, this.state.messages.map(message => React.createElement(\"li\", {\n      key: message.id\n    }, message.value))), React.createElement(\"form\", {\n      onSubmit: e => this.handleSubmit(e)\n    }, React.createElement(\"input\", {\n      onChange: this.handleChange,\n      type: \"text\",\n      placeholder: \"Hello world!\",\n      value: this.state.field\n    }), React.createElement(\"button\", null, \"Send\"))));\n  }\n\n}\n\n_defineProperty(ChatTwo, \"defaultProps\", {\n  messages: [] // init state with the prefetched messages\n\n});\n\nexport default ChatTwo;","map":{"version":3,"sources":["/Users/ilancaster/Desktop/next-js-learning/boilerplates/with-socket.io-app/pages/clone.js"],"names":["Component","Link","fetch","ChatTwo","field","newMessage","messages","props","subscribe","subscribed","state","socket","on","handleMessage","handleOtherMessage","setState","message","concat","prevState","event","target","value","preventDefault","id","Date","getTime","emit","getInitialProps","req","response","json","componentDidMount","componentDidUpdate","getDerivedStateFromProps","componentWillUnmount","off","render","map","e","handleSubmit","handleChange"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport Link from 'next/link'\nimport fetch from 'isomorphic-unfetch'\n\nclass ChatTwo extends Component {\n  // fetch old messages data from the server\n  static async getInitialProps ({ req }) {\n    const response = await fetch('http://localhost:3000/messages/chat2')\n    const messages = await response.json()\n    return { messages }\n  }\n\n  static defaultProps = {\n    messages: []\n  }\n\n  // init state with the prefetched messages\n  state = {\n    field: '',\n    newMessage: 0,\n    messages: this.props.messages,\n    subscribe: false,\n    subscribed: false\n  }\n\n  subscribe = () => {\n    if (this.state.subscribe && !this.state.subscribed) {\n      // connect to WS server and listen event\n      this.props.socket.on('message.chat2', this.handleMessage)\n      this.props.socket.on('message.chat1', this.handleOtherMessage)\n      this.setState({ subscribed: true })\n    }\n  }\n  componentDidMount () {\n    this.subscribe()\n  }\n\n  componentDidUpdate () {\n    this.subscribe()\n  }\n\n  static getDerivedStateFromProps (props, state) {\n    if (props.socket && !state.subscribe) return { subscribe: true }\n    return null\n  }\n\n  // close socket connection\n  componentWillUnmount () {\n    this.props.socket.off('message.chat1', this.handleOtherMessage)\n    this.props.socket.off('message.chat2', this.handleMessage)\n  }\n\n  // add messages from server to the state\n  handleMessage = message => {\n    this.setState(state => ({ messages: state.messages.concat(message) }))\n  }\n\n  handleOtherMessage = () => {\n    this.setState(prevState => ({ newMessage: prevState.newMessage + 1 }))\n  }\n\n  handleChange = event => {\n    this.setState({ field: event.target.value })\n  }\n\n  // send messages to server and add them to the state\n  handleSubmit = event => {\n    event.preventDefault()\n\n    // create message object\n    const message = {\n      id: new Date().getTime(),\n      value: this.state.field\n    }\n\n    // send object to WS server\n    this.props.socket.emit('message.chat2', message)\n\n    // add it to state and clean current input value\n    this.setState(state => ({\n      field: '',\n      messages: state.messages.concat(message)\n    }))\n  }\n\n  render () {\n    return (\n      <main>\n        <div>\n          <Link href={'/'}>\n            <a>{`Chat One ${\n              this.state.newMessage > 0\n                ? `( ${this.state.newMessage} new message )`\n                : ''\n            }`}</a>\n          </Link>\n          <br />\n          <Link href={'/clone'}>\n            <a>{'Chat Two'}</a>\n          </Link>\n          <ul>\n            {this.state.messages.map(message => (\n              <li key={message.id}>{message.value}</li>\n            ))}\n          </ul>\n          <form onSubmit={e => this.handleSubmit(e)}>\n            <input\n              onChange={this.handleChange}\n              type='text'\n              placeholder='Hello world!'\n              value={this.state.field}\n            />\n            <button>Send</button>\n          </form>\n        </div>\n      </main>\n    )\n  }\n}\n\nexport default ChatTwo\n"]},"metadata":{},"sourceType":"module"}