{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport { Component } from 'react';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\n\nvar ChatOne =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatOne, _Component);\n\n  function ChatOne() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ChatOne);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ChatOne)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      field: '',\n      newMessage: 0,\n      messages: _this.props.messages,\n      subscribe: false,\n      subscribed: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"subscribe\", function () {\n      if (_this.state.subscribe && !_this.state.subscribed) {\n        // connect to WS server and listen event\n        _this.props.socket.on('message.chat1', _this.handleMessage);\n\n        _this.props.socket.on('message.chat2', _this.handleOtherMessage);\n\n        _this.setState({\n          subscribed: true\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMessage\", function (message) {\n      _this.setState(function (state) {\n        return {\n          messages: state.messages.concat(message)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOtherMessage\", function () {\n      _this.setState(function (prevState) {\n        return {\n          newMessage: prevState.newMessage + 1\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event) {\n      _this.setState({\n        field: event.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function (event) {\n      event.preventDefault(); // create message object\n\n      var message = {\n        id: new Date().getTime(),\n        value: _this.state.field // send object to WS server\n\n      };\n\n      _this.props.socket.emit('message.chat1', message); // add it to state and clean current input value\n\n\n      _this.setState(function (state) {\n        return {\n          field: '',\n          messages: state.messages.concat(message)\n        };\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ChatOne, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.subscribe();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.subscribe();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    // close socket connection\n    value: function componentWillUnmount() {\n      this.props.socket.off('message.chat1', this.handleMessage);\n      this.props.socket.off('message.chat2', this.handleOtherMessage);\n    } // add messages from server to the state\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"main\", null, React.createElement(\"div\", null, React.createElement(Link, {\n        href: '/'\n      }, React.createElement(\"a\", null, 'Chat One')), React.createElement(\"br\", null), React.createElement(Link, {\n        href: '/clone'\n      }, React.createElement(\"a\", null, \"Chat Two \".concat(this.state.newMessage > 0 ? \"( \".concat(this.state.newMessage, \" new message )\") : ''))), React.createElement(\"ul\", null, this.state.messages.map(function (message) {\n        return React.createElement(\"li\", {\n          key: message.id\n        }, message.value);\n      })), React.createElement(\"form\", {\n        onSubmit: function onSubmit(e) {\n          return _this2.handleSubmit(e);\n        }\n      }, React.createElement(\"input\", {\n        onChange: this.handleChange,\n        type: \"text\",\n        placeholder: \"Hello world!\",\n        value: this.state.field\n      }), React.createElement(\"button\", null, \"Send\"))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    // fetch old messages data from the server\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var req, response, messages;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                req = _ref.req;\n                _context.next = 3;\n                return fetch('http://localhost:3000/messages/chat1');\n\n              case 3:\n                response = _context.sent;\n                _context.next = 6;\n                return response.json();\n\n              case 6:\n                messages = _context.sent;\n                return _context.abrupt(\"return\", {\n                  messages: messages\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }, {\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.socket && !state.subscribe) return {\n        subscribe: true\n      };\n      return null;\n    }\n  }]);\n\n  return ChatOne;\n}(Component);\n\n_defineProperty(ChatOne, \"defaultProps\", {\n  messages: [] // init state with the prefetched messages\n\n});\n\nexport default ChatOne;","map":{"version":3,"sources":["/Users/ilancaster/Desktop/next-js-learning/boilerplates/with-socket.io-app/pages/index.js"],"names":["Component","Link","fetch","ChatOne","field","newMessage","messages","props","subscribe","subscribed","state","socket","on","handleMessage","handleOtherMessage","setState","message","concat","prevState","event","target","value","preventDefault","id","Date","getTime","emit","off","map","e","handleSubmit","handleChange","req","response","json"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport Link from 'next/link'\nimport fetch from 'isomorphic-unfetch'\n\nclass ChatOne extends Component {\n  // fetch old messages data from the server\n  static async getInitialProps ({ req }) {\n    const response = await fetch('http://localhost:3000/messages/chat1')\n    const messages = await response.json()\n    return { messages }\n  }\n\n  static defaultProps = {\n    messages: []\n  }\n\n  // init state with the prefetched messages\n  state = {\n    field: '',\n    newMessage: 0,\n    messages: this.props.messages,\n    subscribe: false,\n    subscribed: false\n  }\n\n  subscribe = () => {\n    if (this.state.subscribe && !this.state.subscribed) {\n      // connect to WS server and listen event\n      this.props.socket.on('message.chat1', this.handleMessage)\n      this.props.socket.on('message.chat2', this.handleOtherMessage)\n      this.setState({ subscribed: true })\n    }\n  }\n  componentDidMount () {\n    this.subscribe()\n  }\n\n  componentDidUpdate () {\n    this.subscribe()\n  }\n\n  static getDerivedStateFromProps (props, state) {\n    if (props.socket && !state.subscribe) return { subscribe: true }\n    return null\n  }\n\n  // close socket connection\n  componentWillUnmount () {\n    this.props.socket.off('message.chat1', this.handleMessage)\n    this.props.socket.off('message.chat2', this.handleOtherMessage)\n  }\n\n  // add messages from server to the state\n  handleMessage = message => {\n    this.setState(state => ({ messages: state.messages.concat(message) }))\n  }\n\n  handleOtherMessage = () => {\n    this.setState(prevState => ({ newMessage: prevState.newMessage + 1 }))\n  }\n\n  handleChange = event => {\n    this.setState({ field: event.target.value })\n  }\n\n  // send messages to server and add them to the state\n  handleSubmit = event => {\n    event.preventDefault()\n\n    // create message object\n    const message = {\n      id: new Date().getTime(),\n      value: this.state.field\n    }\n\n    // send object to WS server\n    this.props.socket.emit('message.chat1', message)\n\n    // add it to state and clean current input value\n    this.setState(state => ({\n      field: '',\n      messages: state.messages.concat(message)\n    }))\n  }\n\n  render () {\n    return (\n      <main>\n        <div>\n          <Link href={'/'}>\n            <a>{'Chat One'}</a>\n          </Link>\n          <br />\n          <Link href={'/clone'}>\n            <a>{`Chat Two ${\n              this.state.newMessage > 0\n                ? `( ${this.state.newMessage} new message )`\n                : ''\n            }`}</a>\n          </Link>\n          <ul>\n            {this.state.messages.map(message => (\n              <li key={message.id}>{message.value}</li>\n            ))}\n          </ul>\n          <form onSubmit={e => this.handleSubmit(e)}>\n            <input\n              onChange={this.handleChange}\n              type='text'\n              placeholder='Hello world!'\n              value={this.state.field}\n            />\n            <button>Send</button>\n          </form>\n        </div>\n      </main>\n    )\n  }\n}\n\nexport default ChatOne\n"]},"metadata":{},"sourceType":"module"}