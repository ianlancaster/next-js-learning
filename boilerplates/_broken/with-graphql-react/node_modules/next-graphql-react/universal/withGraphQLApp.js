'use strict'

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault')

exports.__esModule = true
exports.withGraphQLApp = void 0

var _objectAssign = _interopRequireDefault(require('object-assign'))

var _extends2 = _interopRequireDefault(
  require('@babel/runtime/helpers/extends')
)

var _inheritsLoose2 = _interopRequireDefault(
  require('@babel/runtime/helpers/inheritsLoose')
)

var _graphqlReact = require('graphql-react')

var _server = require('graphql-react/server')

var _LinkHeader = require('next-graphql-react/server/LinkHeader')

var _head = _interopRequireDefault(require('next/head'))

var _react = _interopRequireDefault(require('react'))

var FORWARDABLE_LINK_REL = [
  'dns-prefetch',
  'preconnect',
  'prefetch',
  'preload',
  'modulepreload',
  'prerender'
]

var withGraphQLApp = function withGraphQLApp(App) {
  var _class, _temp

  return (
    (_temp = _class = (function(_React$Component) {
      ;(0, _inheritsLoose2.default)(WithGraphQL, _React$Component)

      function WithGraphQL() {
        var _this

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key]
        }

        _this =
          _React$Component.call.apply(_React$Component, [this].concat(args)) ||
          this
        _this.graphql =
          _this.props.graphql ||
          new _graphqlReact.GraphQL({
            cache: _this.props.graphqlCache
          })
        return _this
      }

      var _proto = WithGraphQL.prototype

      _proto.render = function render() {
        var appProps = (0, _extends2.default)({}, this.props)
        delete appProps.graphqlCache
        return _react.default.createElement(
          App,
          (0, _objectAssign.default)({}, appProps, {
            graphql: this.graphql
          })
        )
      }

      return WithGraphQL
    })(_react.default.Component)),
    (_class.displayName =
      'WithGraphQL(' + (App.displayName || App.name || 'Component') + ')'),
    (_class.getInitialProps = function(context) {
      return new Promise(function(resolve) {
        Promise.resolve(
          App.getInitialProps ? App.getInitialProps(context) : {}
        ).then(function(props) {
          if (process.browser) resolve(props)
          else {
            var graphql = new _graphqlReact.GraphQL()
            var graphqlLinkHeader = new _LinkHeader.LinkHeader()
            graphql.on('cache', function(_ref) {
              var response = _ref.response

              if (response) {
                var linkHeader = response.headers.get('Link')
                if (linkHeader) graphqlLinkHeader.parse(linkHeader)
              }
            })
            ;(0, _server.ssr)(
              graphql,
              _react.default.createElement(
                App,
                (0, _objectAssign.default)({}, props, {
                  graphql: graphql,
                  router: context.router,
                  Component: context.Component
                })
              )
            )
              .catch(console.error)
              .then(function() {
                _head.default.rewind()

                var responseLinkHeader = new _LinkHeader.LinkHeader(
                  context.ctx.res.getHeader('Link')
                )
                graphqlLinkHeader.refs.forEach(function(graphqlLink) {
                  if (
                    FORWARDABLE_LINK_REL.includes(graphqlLink.rel) &&
                    !responseLinkHeader.refs.some(function(_ref2) {
                      var uri = _ref2.uri,
                        rel = _ref2.rel
                      return uri === graphqlLink.uri && rel === graphqlLink.rel
                    })
                  )
                    responseLinkHeader.set(graphqlLink)
                })
                if (responseLinkHeader.refs.length)
                  context.ctx.res.setHeader(
                    'Link',
                    responseLinkHeader.toString()
                  )
                props.graphqlCache = graphql.cache
                resolve(props)
              })
          }
        })
      })
    }),
    _temp
  )
}

exports.withGraphQLApp = withGraphQLApp
