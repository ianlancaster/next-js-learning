{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/ilancaster/Desktop/next-js-learning/boilerplates/with-relay-modern-app/lib/withData.js\";\nimport React from 'react';\nimport initEnvironment from './createRelayEnvironment';\nimport { fetchQuery, ReactRelayContext } from 'react-relay';\nexport default ((ComposedComponent, options = {}) => {\n  var _class, _temp;\n\n  return _temp = _class = class WithData extends React.Component {\n    static async getInitialProps(ctx) {\n      // Evaluate the composed component's getInitialProps()\n      let composedInitialProps = {};\n\n      if (ComposedComponent.getInitialProps) {\n        composedInitialProps = await ComposedComponent.getInitialProps(ctx);\n      }\n\n      let queryProps = {};\n      let queryRecords = {};\n      const environment = initEnvironment();\n\n      if (options.query) {\n        // Provide the `url` prop data in case a graphql query uses it\n        // const url = { query: ctx.query, pathname: ctx.pathname }\n        const variables = {}; // TODO: Consider RelayQueryResponseCache\n        // https://github.com/facebook/relay/issues/1687#issuecomment-302931855\n\n        queryProps = await fetchQuery(environment, options.query, variables);\n        queryRecords = environment.getStore().getSource().toJSON();\n      }\n\n      return _objectSpread({}, composedInitialProps, queryProps, {\n        queryRecords\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.environment = initEnvironment({\n        records: props.queryRecords\n      });\n    }\n\n    render() {\n      return React.createElement(ReactRelayContext.Provider, {\n        value: {\n          environment: this.environment,\n          variables: {}\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(ComposedComponent, _extends({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })));\n    }\n\n  }, _defineProperty(_class, \"displayName\", `WithData(${ComposedComponent.displayName})`), _temp;\n});","map":{"version":3,"sources":["/Users/ilancaster/Desktop/next-js-learning/boilerplates/with-relay-modern-app/lib/withData.js"],"names":["React","initEnvironment","fetchQuery","ReactRelayContext","ComposedComponent","options","WithData","Component","getInitialProps","ctx","composedInitialProps","queryProps","queryRecords","environment","query","variables","getStore","getSource","toJSON","constructor","props","records","render","displayName"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,SAASC,UAAT,EAAqBC,iBAArB,QAA8C,aAA9C;AAEA,gBAAe,CAACC,iBAAD,EAAoBC,OAAO,GAAG,EAA9B,KAAqC;AAAA;;AAClD,0BAAO,MAAMC,QAAN,SAAuBN,KAAK,CAACO,SAA7B,CAAuC;AAG5C,iBAAaC,eAAb,CAA8BC,GAA9B,EAAmC;AACjC;AACA,UAAIC,oBAAoB,GAAG,EAA3B;;AACA,UAAIN,iBAAiB,CAACI,eAAtB,EAAuC;AACrCE,QAAAA,oBAAoB,GAAG,MAAMN,iBAAiB,CAACI,eAAlB,CAAkCC,GAAlC,CAA7B;AACD;;AAED,UAAIE,UAAU,GAAG,EAAjB;AACA,UAAIC,YAAY,GAAG,EAAnB;AACA,YAAMC,WAAW,GAAGZ,eAAe,EAAnC;;AAEA,UAAII,OAAO,CAACS,KAAZ,EAAmB;AACjB;AACA;AACA,cAAMC,SAAS,GAAG,EAAlB,CAHiB,CAIjB;AACA;;AACAJ,QAAAA,UAAU,GAAG,MAAMT,UAAU,CAACW,WAAD,EAAcR,OAAO,CAACS,KAAtB,EAA6BC,SAA7B,CAA7B;AACAH,QAAAA,YAAY,GAAGC,WAAW,CACvBG,QADY,GAEZC,SAFY,GAGZC,MAHY,EAAf;AAID;;AAED,+BACKR,oBADL,EAEKC,UAFL;AAGEC,QAAAA;AAHF;AAKD;;AAEDO,IAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,YAAMA,KAAN;AACA,WAAKP,WAAL,GAAmBZ,eAAe,CAAC;AACjCoB,QAAAA,OAAO,EAAED,KAAK,CAACR;AADkB,OAAD,CAAlC;AAGD;;AAEDU,IAAAA,MAAM,GAAI;AACR,aACE,oBAAC,iBAAD,CAAmB,QAAnB;AACE,QAAA,KAAK,EAAE;AAAET,UAAAA,WAAW,EAAE,KAAKA,WAApB;AAAiCE,UAAAA,SAAS,EAAE;AAA5C,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGE,oBAAC,iBAAD,eAAuB,KAAKK,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHF,CADF;AAOD;;AAjD2C,GAA9C,yCACwB,YAAWhB,iBAAiB,CAACmB,WAAY,GADjE;AAmDD,CApDD","sourcesContent":["import React from 'react'\nimport initEnvironment from './createRelayEnvironment'\nimport { fetchQuery, ReactRelayContext } from 'react-relay'\n\nexport default (ComposedComponent, options = {}) => {\n  return class WithData extends React.Component {\n    static displayName = `WithData(${ComposedComponent.displayName})`\n\n    static async getInitialProps (ctx) {\n      // Evaluate the composed component's getInitialProps()\n      let composedInitialProps = {}\n      if (ComposedComponent.getInitialProps) {\n        composedInitialProps = await ComposedComponent.getInitialProps(ctx)\n      }\n\n      let queryProps = {}\n      let queryRecords = {}\n      const environment = initEnvironment()\n\n      if (options.query) {\n        // Provide the `url` prop data in case a graphql query uses it\n        // const url = { query: ctx.query, pathname: ctx.pathname }\n        const variables = {}\n        // TODO: Consider RelayQueryResponseCache\n        // https://github.com/facebook/relay/issues/1687#issuecomment-302931855\n        queryProps = await fetchQuery(environment, options.query, variables)\n        queryRecords = environment\n          .getStore()\n          .getSource()\n          .toJSON()\n      }\n\n      return {\n        ...composedInitialProps,\n        ...queryProps,\n        queryRecords\n      }\n    }\n\n    constructor (props) {\n      super(props)\n      this.environment = initEnvironment({\n        records: props.queryRecords\n      })\n    }\n\n    render () {\n      return (\n        <ReactRelayContext.Provider\n          value={{ environment: this.environment, variables: {} }}\n        >\n          <ComposedComponent {...this.props} />\n        </ReactRelayContext.Provider>\n      )\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}