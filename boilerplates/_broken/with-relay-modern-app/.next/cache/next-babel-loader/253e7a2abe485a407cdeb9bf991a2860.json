{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport { Environment, Network, RecordSource, Store } from 'relay-runtime';\nimport fetch from 'isomorphic-unfetch';\nvar relayEnvironment = null; // Define a function that fetches the results of an operation (query/mutation/etc)\n// and returns its results as a Promise:\n\nfunction fetchQuery(operation, variables, cacheConfig, uploadables) {\n  return fetch(process.env.RELAY_ENDPOINT, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    // Add authentication and other headers here\n    body: _JSON$stringify({\n      query: operation.text,\n      // GraphQL text from input\n      variables: variables\n    })\n  }).then(function (response) {\n    return response.json();\n  });\n}\n\nexport default function initEnvironment() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$records = _ref.records,\n      records = _ref$records === void 0 ? {} : _ref$records;\n\n  // Create a network layer from the fetch function\n  var network = Network.create(fetchQuery);\n  var store = new Store(new RecordSource(records)); // Make sure to create a new Relay environment for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n\n  if (typeof window === 'undefined') {\n    return new Environment({\n      network: network,\n      store: store\n    });\n  } // reuse Relay environment on client-side\n\n\n  if (!relayEnvironment) {\n    relayEnvironment = new Environment({\n      network: network,\n      store: store\n    });\n  }\n\n  return relayEnvironment;\n}","map":{"version":3,"sources":["/Users/ilancaster/Desktop/next-js-learning/boilerplates/with-relay-modern-app/lib/createRelayEnvironment.js"],"names":["Environment","Network","RecordSource","Store","fetch","relayEnvironment","fetchQuery","operation","variables","cacheConfig","uploadables","process","env","RELAY_ENDPOINT","method","headers","Accept","body","query","text","then","response","json","initEnvironment","records","network","create","store","window"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,YAA/B,EAA6CC,KAA7C,QAA0D,eAA1D;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,IAAIC,gBAAgB,GAAG,IAAvB,C,CAEA;AACA;;AACA,SAASC,UAAT,CAAqBC,SAArB,EAAgCC,SAAhC,EAA2CC,WAA3C,EAAwDC,WAAxD,EAAqE;AACnE,SAAON,KAAK,CAACO,OAAO,CAACC,GAAR,CAAYC,cAAb,EAA6B;AACvCC,IAAAA,MAAM,EAAE,MAD+B;AAEvCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAF8B;AAKpC;AACHC,IAAAA,IAAI,EAAE,gBAAe;AACnBC,MAAAA,KAAK,EAAEX,SAAS,CAACY,IADE;AACI;AACvBX,MAAAA,SAAS,EAATA;AAFmB,KAAf;AANiC,GAA7B,CAAL,CAUJY,IAVI,CAUC,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,GAVT,CAAP;AAWD;;AAED,eAAe,SAASC,eAAT,GAAiD;AAAA,iFAAJ,EAAI;AAAA,0BAArBC,OAAqB;AAAA,MAArBA,OAAqB,6BAAX,EAAW;;AAC9D;AACA,MAAMC,OAAO,GAAGxB,OAAO,CAACyB,MAAR,CAAepB,UAAf,CAAhB;AACA,MAAMqB,KAAK,GAAG,IAAIxB,KAAJ,CAAU,IAAID,YAAJ,CAAiBsB,OAAjB,CAAV,CAAd,CAH8D,CAK9D;AACA;;AACA,MAAI,OAAOI,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,IAAI5B,WAAJ,CAAgB;AACrByB,MAAAA,OAAO,EAAPA,OADqB;AAErBE,MAAAA,KAAK,EAALA;AAFqB,KAAhB,CAAP;AAID,GAZ6D,CAc9D;;;AACA,MAAI,CAACtB,gBAAL,EAAuB;AACrBA,IAAAA,gBAAgB,GAAG,IAAIL,WAAJ,CAAgB;AACjCyB,MAAAA,OAAO,EAAPA,OADiC;AAEjCE,MAAAA,KAAK,EAALA;AAFiC,KAAhB,CAAnB;AAID;;AAED,SAAOtB,gBAAP;AACD","sourcesContent":["import { Environment, Network, RecordSource, Store } from 'relay-runtime'\nimport fetch from 'isomorphic-unfetch'\n\nlet relayEnvironment = null\n\n// Define a function that fetches the results of an operation (query/mutation/etc)\n// and returns its results as a Promise:\nfunction fetchQuery (operation, variables, cacheConfig, uploadables) {\n  return fetch(process.env.RELAY_ENDPOINT, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }, // Add authentication and other headers here\n    body: JSON.stringify({\n      query: operation.text, // GraphQL text from input\n      variables\n    })\n  }).then(response => response.json())\n}\n\nexport default function initEnvironment ({ records = {} } = {}) {\n  // Create a network layer from the fetch function\n  const network = Network.create(fetchQuery)\n  const store = new Store(new RecordSource(records))\n\n  // Make sure to create a new Relay environment for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return new Environment({\n      network,\n      store\n    })\n  }\n\n  // reuse Relay environment on client-side\n  if (!relayEnvironment) {\n    relayEnvironment = new Environment({\n      network,\n      store\n    })\n  }\n\n  return relayEnvironment\n}\n"]},"metadata":{},"sourceType":"module"}