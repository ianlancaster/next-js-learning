"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = 'get-schema [endpoint]';
exports.desc = 'Download schema from endpoint';
exports.builder = {
    watch: {
        alias: 'w',
        boolean: true,
        description: 'watch server for schema changes and update local schema',
    },
};
var fs_1 = require("fs");
var path_1 = require("path");
var graphql_1 = require("graphql");
var graphql_config_1 = require("graphql-config");
var chalk_1 = require("chalk");
var _1 = require("../");
function handler(context, argv) {
    return __awaiter(this, void 0, void 0, function () {
        function update(log) {
            return __awaiter(this, void 0, void 0, function () {
                var config, endpoint, newSchema, oldSchemaSDL, newSchemaSDL, schemaPath, existed;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            config = context.getProjectConfig();
                            if (!config.endpointsExtension) {
                                throw _1.noEndpointError;
                            }
                            endpoint = config.endpointsExtension.getEndpoint(argv.endpoint);
                            log("Downloading introspection from " + chalk_1.default.blue(endpoint.url));
                            return [4 /*yield*/, endpoint.resolveSchema()];
                        case 1:
                            newSchema = _a.sent();
                            try {
                                oldSchemaSDL = config.getSchemaSDL();
                            }
                            catch (e) {
                                // ignore error if no previous schema file existed
                                if (e.code !== 'ENOENT') {
                                    throw e;
                                }
                            }
                            if (oldSchemaSDL) {
                                newSchemaSDL = graphql_1.printSchema(newSchema);
                                if (newSchemaSDL === oldSchemaSDL) {
                                    log(chalk_1.default.green('No changes'));
                                    return [2 /*return*/, false];
                                }
                            }
                            schemaPath = path_1.relative(process.cwd(), config.schemaPath);
                            return [4 /*yield*/, graphql_config_1.writeSchema(config.schemaPath, newSchema, {
                                    source: endpoint.url,
                                    timestamp: (new Date()).toString(),
                                })];
                        case 2:
                            _a.sent();
                            existed = fs_1.existsSync(schemaPath);
                            log(chalk_1.default.green("Schema file was " + (existed ? 'updated' : 'created') + ": " + chalk_1.default.blue(schemaPath)));
                            return [2 /*return*/, true];
                    }
                });
            });
        }
        var spinner_1, spinnerLog, isUpdated, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!argv.watch) return [3 /*break*/, 8];
                    spinner_1 = context.spinner;
                    // FIXME: stop spinner on errors
                    spinner_1.start();
                    spinnerLog = function (msg) { return spinner_1.text = msg; };
                    _a.label = 1;
                case 1:
                    if (!true) return [3 /*break*/, 7];
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, update(spinnerLog)];
                case 3:
                    isUpdated = _a.sent();
                    if (isUpdated) {
                        spinner_1.stop();
                        console.log(spinner_1.text);
                        spinner_1.start();
                        spinner_1.text = 'Updated!';
                    }
                    else {
                        spinner_1.text = 'No changes.';
                    }
                    return [3 /*break*/, 5];
                case 4:
                    err_1 = _a.sent();
                    spinner_1.stop();
                    console.error(chalk_1.default.red(err_1.message));
                    spinner_1.start();
                    spinner_1.text = 'Error.';
                    return [3 /*break*/, 5];
                case 5:
                    spinner_1.text += ' Next update in 10s.';
                    return [4 /*yield*/, wait(10000)];
                case 6:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 7: return [3 /*break*/, 10];
                case 8: return [4 /*yield*/, update(console.log)];
                case 9: return [2 /*return*/, _a.sent()];
                case 10: return [2 /*return*/];
            }
        });
    });
}
exports.handler = handler;
function wait(interval) {
    return new Promise(function (resolve) {
        setTimeout(function () { return resolve(); }, interval);
    });
}
//# sourceMappingURL=get-schema.js.map