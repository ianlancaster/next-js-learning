{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(runClockSaga);\n\nimport { delay, call, put, take } from 'redux-saga/effects';\nimport { polyfill } from 'es6-promise';\nimport 'isomorphic-unfetch';\nimport { actionTypes, tickClock } from './actions';\npolyfill();\n\nfunction runClockSaga() {\n  return _regeneratorRuntime.wrap(function runClockSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return take(actionTypes.START_CLOCK);\n\n        case 2:\n          if (!true) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 5;\n          return put(tickClock(false));\n\n        case 5:\n          _context.next = 7;\n          return delay(800);\n\n        case 7:\n          _context.next = 2;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nexport default call(runClockSaga);","map":{"version":3,"sources":["/Users/ilancaster/Desktop/next-js-learning/boilerplates/with-apollo-and-redux-saga-app/lib/clock/sagas.js"],"names":["runClockSaga","delay","call","put","take","polyfill","actionTypes","tickClock","START_CLOCK"],"mappings":";;;;yBAQWA,Y;;AARX,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,IAA3B,QAAuC,oBAAvC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAO,oBAAP;AAEA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,WAAvC;AAEAF,QAAQ;;AAER,SAAWL,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMI,IAAI,CAACE,WAAW,CAACE,WAAb,CAAV;;AADF;AAAA,eAES,IAFT;AAAA;AAAA;AAAA;;AAAA;AAGI,iBAAML,GAAG,CAACI,SAAS,CAAC,KAAD,CAAV,CAAT;;AAHJ;AAAA;AAII,iBAAMN,KAAK,CAAC,GAAD,CAAX;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,eAAeC,IAAI,CAACF,YAAD,CAAnB","sourcesContent":["import { delay, call, put, take } from 'redux-saga/effects'\nimport { polyfill } from 'es6-promise'\nimport 'isomorphic-unfetch'\n\nimport { actionTypes, tickClock } from './actions'\n\npolyfill()\n\nfunction * runClockSaga () {\n  yield take(actionTypes.START_CLOCK)\n  while (true) {\n    yield put(tickClock(false))\n    yield delay(800)\n  }\n}\n\nexport default call(runClockSaga)\n"]},"metadata":{},"sourceType":"module"}