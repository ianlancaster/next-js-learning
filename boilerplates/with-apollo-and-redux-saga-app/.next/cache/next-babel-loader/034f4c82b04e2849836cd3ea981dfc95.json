{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nimport { graphql } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { Router } from '../routes';\nimport ErrorMessage from './ErrorMessage';\nimport PostVoteUp from './PostVoteUp';\nimport PostVoteDown from './PostVoteDown';\nimport PostVoteCount from './PostVoteCount';\nconst POSTS_PER_PAGE = 10;\n\nfunction handleClick(event, id) {\n  event.preventDefault(); // With route name and params\n  // Router.pushRoute('blog/entry', { id: id })\n  // With route URL\n\n  Router.pushRoute(`/blog/${id}`);\n}\n\nfunction PostList({\n  data: {\n    loading,\n    error,\n    allPosts,\n    _allPostsMeta\n  },\n  loadMorePosts\n}) {\n  if (error) return React.createElement(ErrorMessage, {\n    message: \"Error loading posts.\"\n  });\n\n  if (allPosts && allPosts.length) {\n    const areMorePosts = allPosts.length < _allPostsMeta.count;\n    return React.createElement(\"section\", {\n      className: \"jsx-2126052553\"\n    }, React.createElement(\"ul\", {\n      className: \"jsx-2126052553\"\n    }, allPosts.map((post, index) => React.createElement(\"li\", {\n      key: post.id,\n      className: \"jsx-2126052553\"\n    }, React.createElement(\"div\", {\n      className: \"jsx-2126052553\"\n    }, React.createElement(\"span\", {\n      className: \"jsx-2126052553\"\n    }, index + 1, \". \"), React.createElement(\"a\", {\n      href: `/blog/${post.id}`,\n      onClick: event => handleClick(event, post.id),\n      className: \"jsx-2126052553\"\n    }, post.title), React.createElement(PostVoteUp, {\n      id: post.id,\n      votes: post.votes\n    }), React.createElement(PostVoteCount, {\n      votes: post.votes\n    }), React.createElement(PostVoteDown, {\n      id: post.id,\n      votes: post.votes\n    }))))), areMorePosts ? React.createElement(\"button\", {\n      onClick: () => loadMorePosts(),\n      className: \"jsx-2126052553\"\n    }, ' ', loading ? 'Loading...' : 'Show More', ' ') : '', React.createElement(_JSXStyle, {\n      id: \"2126052553\"\n    }, \"section.jsx-2126052553{padding-bottom:20px;}li.jsx-2126052553{display:block;margin-bottom:10px;}div.jsx-2126052553{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}a.jsx-2126052553{font-size:14px;margin-right:10px;-webkit-text-decoration:none;text-decoration:none;padding-bottom:0;border:0;}span.jsx-2126052553{font-size:14px;margin-right:5px;}ul.jsx-2126052553{margin:0;padding:0;}button.jsx-2126052553:before{-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;border-style:solid;border-width:6px 4px 0 4px;border-color:#ffffff transparent transparent transparent;content:'';height:0;margin-right:5px;width:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9pbGFuY2FzdGVyL0Rlc2t0b3AvbmV4dC1qcy1sZWFybmluZy9ib2lsZXJwbGF0ZXMvd2l0aC1hcG9sbG8tYW5kLXJlZHV4LXNhZ2EtYXBwL2NvbXBvbmVudHMvUG9zdExpc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcURvQixBQUdpQyxBQUdOLEFBSUssQUFJSixBQU9BLEFBSU4sQUFJUyxTQUhSLEtBbkJTLENBUUQsQUFPRCxJQUtuQixDQXZCQSxZQW1CQSxDQWZBLEFBUXVCLHNDQWNGLFlBYkYsT0FjVSxHQXBCZCxPQU9KLFNBQ1gsUUFhMkQsa0RBcEIzRCxPQXFCYSxXQUNGLFNBQ1EsaUJBQ1QsUUFDViIsImZpbGUiOiIvVXNlcnMvaWxhbmNhc3Rlci9EZXNrdG9wL25leHQtanMtbGVhcm5pbmcvYm9pbGVycGxhdGVzL3dpdGgtYXBvbGxvLWFuZC1yZWR1eC1zYWdhLWFwcC9jb21wb25lbnRzL1Bvc3RMaXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ3JhcGhxbCB9IGZyb20gJ3JlYWN0LWFwb2xsbydcbmltcG9ydCBncWwgZnJvbSAnZ3JhcGhxbC10YWcnXG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICcuLi9yb3V0ZXMnXG5pbXBvcnQgRXJyb3JNZXNzYWdlIGZyb20gJy4vRXJyb3JNZXNzYWdlJ1xuaW1wb3J0IFBvc3RWb3RlVXAgZnJvbSAnLi9Qb3N0Vm90ZVVwJ1xuaW1wb3J0IFBvc3RWb3RlRG93biBmcm9tICcuL1Bvc3RWb3RlRG93bidcbmltcG9ydCBQb3N0Vm90ZUNvdW50IGZyb20gJy4vUG9zdFZvdGVDb3VudCdcblxuY29uc3QgUE9TVFNfUEVSX1BBR0UgPSAxMFxuXG5mdW5jdGlvbiBoYW5kbGVDbGljayAoZXZlbnQsIGlkKSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgLy8gV2l0aCByb3V0ZSBuYW1lIGFuZCBwYXJhbXNcbiAgLy8gUm91dGVyLnB1c2hSb3V0ZSgnYmxvZy9lbnRyeScsIHsgaWQ6IGlkIH0pXG4gIC8vIFdpdGggcm91dGUgVVJMXG4gIFJvdXRlci5wdXNoUm91dGUoYC9ibG9nLyR7aWR9YClcbn1cblxuZnVuY3Rpb24gUG9zdExpc3QgKHtcbiAgZGF0YTogeyBsb2FkaW5nLCBlcnJvciwgYWxsUG9zdHMsIF9hbGxQb3N0c01ldGEgfSxcbiAgbG9hZE1vcmVQb3N0c1xufSkge1xuICBpZiAoZXJyb3IpIHJldHVybiA8RXJyb3JNZXNzYWdlIG1lc3NhZ2U9J0Vycm9yIGxvYWRpbmcgcG9zdHMuJyAvPlxuICBpZiAoYWxsUG9zdHMgJiYgYWxsUG9zdHMubGVuZ3RoKSB7XG4gICAgY29uc3QgYXJlTW9yZVBvc3RzID0gYWxsUG9zdHMubGVuZ3RoIDwgX2FsbFBvc3RzTWV0YS5jb3VudFxuICAgIHJldHVybiAoXG4gICAgICA8c2VjdGlvbj5cbiAgICAgICAgPHVsPlxuICAgICAgICAgIHthbGxQb3N0cy5tYXAoKHBvc3QsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICA8bGkga2V5PXtwb3N0LmlkfT5cbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8c3Bhbj57aW5kZXggKyAxfS4gPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICBocmVmPXtgL2Jsb2cvJHtwb3N0LmlkfWB9XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXtldmVudCA9PiBoYW5kbGVDbGljayhldmVudCwgcG9zdC5pZCl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge3Bvc3QudGl0bGV9XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgIDxQb3N0Vm90ZVVwIGlkPXtwb3N0LmlkfSB2b3Rlcz17cG9zdC52b3Rlc30gLz5cbiAgICAgICAgICAgICAgICA8UG9zdFZvdGVDb3VudCB2b3Rlcz17cG9zdC52b3Rlc30gLz5cbiAgICAgICAgICAgICAgICA8UG9zdFZvdGVEb3duIGlkPXtwb3N0LmlkfSB2b3Rlcz17cG9zdC52b3Rlc30gLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L3VsPlxuICAgICAgICB7YXJlTW9yZVBvc3RzID8gKFxuICAgICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gbG9hZE1vcmVQb3N0cygpfT5cbiAgICAgICAgICAgIHsnICd9XG4gICAgICAgICAgICB7bG9hZGluZyA/ICdMb2FkaW5nLi4uJyA6ICdTaG93IE1vcmUnfXsnICd9XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgJydcbiAgICAgICAgKX1cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgIHNlY3Rpb24ge1xuICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDIwcHg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxpIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGl2IHtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICBhIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAwO1xuICAgICAgICAgICAgYm9yZGVyOiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzcGFuIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgICAgICAgIH1cbiAgICAgICAgICB1bCB7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidXR0b246YmVmb3JlIHtcbiAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICAgICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgICAgICAgICBib3JkZXItd2lkdGg6IDZweCA0cHggMCA0cHg7XG4gICAgICAgICAgICBib3JkZXItY29sb3I6ICNmZmZmZmYgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICAgIGhlaWdodDogMDtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgICAgICAgICAgd2lkdGg6IDA7XG4gICAgICAgICAgfVxuICAgICAgICBgfTwvc3R5bGU+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgKVxuICB9XG4gIHJldHVybiA8ZGl2PkxvYWRpbmc8L2Rpdj5cbn1cblxuZXhwb3J0IGNvbnN0IGFsbFBvc3RzID0gZ3FsYFxuICBxdWVyeSBhbGxQb3N0cygkZmlyc3Q6IEludCEsICRza2lwOiBJbnQhKSB7XG4gICAgYWxsUG9zdHMob3JkZXJCeTogY3JlYXRlZEF0X0RFU0MsIGZpcnN0OiAkZmlyc3QsIHNraXA6ICRza2lwKSB7XG4gICAgICBpZFxuICAgICAgdGl0bGVcbiAgICAgIHZvdGVzXG4gICAgICB1cmxcbiAgICAgIGNyZWF0ZWRBdFxuICAgIH1cbiAgICBfYWxsUG9zdHNNZXRhIHtcbiAgICAgIGNvdW50XG4gICAgfVxuICB9XG5gXG5cbmV4cG9ydCBjb25zdCBhbGxQb3N0c1F1ZXJ5VmFycyA9IHtcbiAgc2tpcDogMCxcbiAgZmlyc3Q6IFBPU1RTX1BFUl9QQUdFXG59XG5cbi8vIFRoZSBgZ3JhcGhxbGAgd3JhcHBlciBleGVjdXRlcyBhIEdyYXBoUUwgcXVlcnkgYW5kIG1ha2VzIHRoZSByZXN1bHRzXG4vLyBhdmFpbGFibGUgb24gdGhlIGBkYXRhYCBwcm9wIG9mIHRoZSB3cmFwcGVkIGNvbXBvbmVudCAoUG9zdExpc3QpXG5leHBvcnQgZGVmYXVsdCBncmFwaHFsKGFsbFBvc3RzLCB7XG4gIG9wdGlvbnM6IHtcbiAgICB2YXJpYWJsZXM6IGFsbFBvc3RzUXVlcnlWYXJzXG4gIH0sXG4gIHByb3BzOiAoeyBkYXRhIH0pID0+ICh7XG4gICAgZGF0YSxcbiAgICBsb2FkTW9yZVBvc3RzOiAoKSA9PiB7XG4gICAgICByZXR1cm4gZGF0YS5mZXRjaE1vcmUoe1xuICAgICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgICBza2lwOiBkYXRhLmFsbFBvc3RzLmxlbmd0aFxuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVRdWVyeTogKHByZXZpb3VzUmVzdWx0LCB7IGZldGNoTW9yZVJlc3VsdCB9KSA9PiB7XG4gICAgICAgICAgaWYgKCFmZXRjaE1vcmVSZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1Jlc3VsdFxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJldmlvdXNSZXN1bHQsIHtcbiAgICAgICAgICAgIC8vIEFwcGVuZCB0aGUgbmV3IHBvc3RzIHJlc3VsdHMgdG8gdGhlIG9sZCBvbmVcbiAgICAgICAgICAgIGFsbFBvc3RzOiBbLi4ucHJldmlvdXNSZXN1bHQuYWxsUG9zdHMsIC4uLmZldGNoTW9yZVJlc3VsdC5hbGxQb3N0c11cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfSlcbn0pKFBvc3RMaXN0KVxuIl19 */\\n/*@ sourceURL=/Users/ilancaster/Desktop/next-js-learning/boilerplates/with-apollo-and-redux-saga-app/components/PostList.js */\"));\n  }\n\n  return React.createElement(\"div\", null, \"Loading\");\n}\n\nexport const allPosts = gql`\n  query allPosts($first: Int!, $skip: Int!) {\n    allPosts(orderBy: createdAt_DESC, first: $first, skip: $skip) {\n      id\n      title\n      votes\n      url\n      createdAt\n    }\n    _allPostsMeta {\n      count\n    }\n  }\n`;\nexport const allPostsQueryVars = {\n  skip: 0,\n  first: POSTS_PER_PAGE // The `graphql` wrapper executes a GraphQL query and makes the results\n  // available on the `data` prop of the wrapped component (PostList)\n\n};\nexport default graphql(allPosts, {\n  options: {\n    variables: allPostsQueryVars\n  },\n  props: ({\n    data\n  }) => ({\n    data,\n    loadMorePosts: () => {\n      return data.fetchMore({\n        variables: {\n          skip: data.allPosts.length\n        },\n        updateQuery: (previousResult, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) {\n            return previousResult;\n          }\n\n          return _Object$assign({}, previousResult, {\n            // Append the new posts results to the old one\n            allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts]\n          });\n        }\n      });\n    }\n  })\n})(PostList);","map":{"version":3,"sources":["/Users/ilancaster/Desktop/next-js-learning/boilerplates/with-apollo-and-redux-saga-app/components/PostList.js"],"names":["graphql","gql","Router","ErrorMessage","PostVoteUp","PostVoteDown","PostVoteCount","POSTS_PER_PAGE","handleClick","event","id","preventDefault","pushRoute","PostList","data","loading","error","allPosts","_allPostsMeta","loadMorePosts","length","areMorePosts","count","map","post","index","title","votes","allPostsQueryVars","skip","first","options","variables","props","fetchMore","updateQuery","previousResult","fetchMoreResult"],"mappings":"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","sourcesContent":["import { graphql } from 'react-apollo'\nimport gql from 'graphql-tag'\nimport { Router } from '../routes'\nimport ErrorMessage from './ErrorMessage'\nimport PostVoteUp from './PostVoteUp'\nimport PostVoteDown from './PostVoteDown'\nimport PostVoteCount from './PostVoteCount'\n\nconst POSTS_PER_PAGE = 10\n\nfunction handleClick (event, id) {\n  event.preventDefault()\n  // With route name and params\n  // Router.pushRoute('blog/entry', { id: id })\n  // With route URL\n  Router.pushRoute(`/blog/${id}`)\n}\n\nfunction PostList ({\n  data: { loading, error, allPosts, _allPostsMeta },\n  loadMorePosts\n}) {\n  if (error) return <ErrorMessage message='Error loading posts.' />\n  if (allPosts && allPosts.length) {\n    const areMorePosts = allPosts.length < _allPostsMeta.count\n    return (\n      <section>\n        <ul>\n          {allPosts.map((post, index) => (\n            <li key={post.id}>\n              <div>\n                <span>{index + 1}. </span>\n                <a\n                  href={`/blog/${post.id}`}\n                  onClick={event => handleClick(event, post.id)}\n                >\n                  {post.title}\n                </a>\n                <PostVoteUp id={post.id} votes={post.votes} />\n                <PostVoteCount votes={post.votes} />\n                <PostVoteDown id={post.id} votes={post.votes} />\n              </div>\n            </li>\n          ))}\n        </ul>\n        {areMorePosts ? (\n          <button onClick={() => loadMorePosts()}>\n            {' '}\n            {loading ? 'Loading...' : 'Show More'}{' '}\n          </button>\n        ) : (\n          ''\n        )}\n        <style jsx>{`\n          section {\n            padding-bottom: 20px;\n          }\n          li {\n            display: block;\n            margin-bottom: 10px;\n          }\n          div {\n            align-items: center;\n            display: flex;\n          }\n          a {\n            font-size: 14px;\n            margin-right: 10px;\n            text-decoration: none;\n            padding-bottom: 0;\n            border: 0;\n          }\n          span {\n            font-size: 14px;\n            margin-right: 5px;\n          }\n          ul {\n            margin: 0;\n            padding: 0;\n          }\n          button:before {\n            align-self: center;\n            border-style: solid;\n            border-width: 6px 4px 0 4px;\n            border-color: #ffffff transparent transparent transparent;\n            content: '';\n            height: 0;\n            margin-right: 5px;\n            width: 0;\n          }\n        `}</style>\n      </section>\n    )\n  }\n  return <div>Loading</div>\n}\n\nexport const allPosts = gql`\n  query allPosts($first: Int!, $skip: Int!) {\n    allPosts(orderBy: createdAt_DESC, first: $first, skip: $skip) {\n      id\n      title\n      votes\n      url\n      createdAt\n    }\n    _allPostsMeta {\n      count\n    }\n  }\n`\n\nexport const allPostsQueryVars = {\n  skip: 0,\n  first: POSTS_PER_PAGE\n}\n\n// The `graphql` wrapper executes a GraphQL query and makes the results\n// available on the `data` prop of the wrapped component (PostList)\nexport default graphql(allPosts, {\n  options: {\n    variables: allPostsQueryVars\n  },\n  props: ({ data }) => ({\n    data,\n    loadMorePosts: () => {\n      return data.fetchMore({\n        variables: {\n          skip: data.allPosts.length\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          if (!fetchMoreResult) {\n            return previousResult\n          }\n          return Object.assign({}, previousResult, {\n            // Append the new posts results to the old one\n            allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts]\n          })\n        }\n      })\n    }\n  })\n})(PostList)\n"]},"metadata":{},"sourceType":"module"}